services:
  postgres:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow"]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 10s

  mlflow:
    build: ./mlflow
    image: local/mlflow:latest
    container_name: mlflow
    user: "0:0"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    environment:
      - GUNICORN_CMD_ARGS=--workers 1 --timeout 300 --graceful-timeout 60 --threads 1 --keep-alive 5
    command: >
      mlflow server
      --backend-store-uri postgresql+psycopg2://mlflow:mlflow@postgres:5432/mlflow?pool_pre_ping=true
      --serve-artifacts
      --artifacts-destination /mlflow/artifacts
      --host 0.0.0.0 --port 5000
      --workers 1
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5000/api/2.0/mlflow/experiments/list >/dev/null"]
      interval: 5s
      timeout: 5s
      retries: 120
      start_period: 45s
    restart: unless-stopped

  trainer:
    build: ./trainer
    image: local/trainer:latest
    container_name: trainer
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000

  serve:
    build: ./serve
    image: local/serve:latest
    container_name: serve
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_NAME=CancerClassifier
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 25
      start_period: 10s
    restart: unless-stopped

volumes:
  pgdata: {}
  mlflow_artifacts: {}






