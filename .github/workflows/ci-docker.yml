name: deploy-mlflow-fastapi

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-mlflow-fastapi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      # Build (toutes les images)
      - name: Build images
        run: docker compose -f docker-compose.yml build

      # Démarre Postgres + MLflow (sans scripts maison)
      - name: Up DB + MLflow
        run: docker compose -f docker-compose.yml up -d postgres mlflow

      # Attendre l'API MLflow /api/2.0/... avec une action dédiée
      - name: Wait for MLflow API
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:5000/api/2.0/mlflow/experiments/list
          max-attempts: 120     # 120 * 5s = 10 min
          retry-delay: 5s
          follow-redirect: false
          valid-status-codes: 200

      # Entraîner et enregistrer une nouvelle version (v2, v3, …)
      - name: Train & register model
        run: docker compose -f docker-compose.yml run --rm trainer

      # Déployer l'API (démarrage rapide, lazy-load du modèle côté app si tu as pris mon main.py)
      - name: Up serve
        run: docker compose -f docker-compose.yml up -d serve

      # Health-check FastAPI (pas de script custom)
      - name: Wait for FastAPI
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:8000/health
          max-attempts: 60
          retry-delay: 3s
          valid-status-codes: 200

      - name: Show endpoints
        run: |
          echo "MLflow UI     : http://127.0.0.1:5000"
          echo "FastAPI (docs): http://127.0.0.1:8000/docs"





