name: deploy-mlflow-fastapi

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-mlflow-fastapi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build des 3 images (chargées localement, pas de push registre)
      - name: Build MLflow image
        uses: docker/build-push-action@v5
        with:
          context: ./mlflow
          tags: local/mlflow:latest
          load: true
          push: false

      - name: Build trainer image
        uses: docker/build-push-action@v5
        with:
          context: ./trainer
          tags: local/trainer:latest
          load: true
          push: false

      - name: Build serve image
        uses: docker/build-push-action@v5
        with:
          context: ./serve
          tags: local/serve:latest
          load: true
          push: false

      # Démarrer Postgres + MLflow
      - name: Up DB + MLflow
        run: docker compose -f docker-compose.yml up -d postgres mlflow

      # Attente robuste MLflow (UI puis API), via action dédiée (pas de script shell)
      - name: Wait for MLflow Web UI
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:5000/
          max-attempts: 60
          retry-delay: 5s
          follow-redirect: false
          retry-all: true

      - name: Wait for MLflow API
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:5000/api/2.0/mlflow/experiments/list
          max-attempts: 120
          retry-delay: 5s
          follow-redirect: false
          retry-all: true

      # Entraîner & créer une nouvelle version du modèle
      - name: Train & register model
        run: docker compose -f docker-compose.yml run --rm trainer

      # Déployer / rafraîchir l'API FastAPI
      - name: Up serve
        run: docker compose -f docker-compose.yml up -d serve

      - name: Wait for FastAPI
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:8000/health
          max-attempts: 60
          retry-delay: 3s
          follow-redirect: false
          retry-all: true

      # (Optionnel) Redémarrer pour s'assurer que la dernière version du modèle est chargée
      - name: Restart serve to load latest model
        run: docker compose -f docker-compose.yml restart serve

      - name: Wait for FastAPI (post-restart)
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:8000/health
          max-attempts: 60
          retry-delay: 3s
          follow-redirect: false
          retry-all: true

      # Logs en artefacts (utile en cas d'échec, sans shell custom)
      - name: Export docker compose logs
        if: always()
        run: docker compose -f docker-compose.yml logs --no-color > compose.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose.log











