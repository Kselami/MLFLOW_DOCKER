name: deploy-mlflow-fastapi

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-mlflow-fastapi-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4

      # Build (toutes les images)
      - name: Build images
        run: docker compose -f docker-compose.yml build

      # Démarrer Postgres + MLflow (architecture moderne avec backend Postgres)
      - name: Up DB + MLflow
        run: docker compose -f docker-compose.yml up -d postgres mlflow

      # ✅ Attente robuste de l’API MLflow (plus de valid-status-codes ; retry-all activé)
      - name: Wait for MLflow API
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:5000/api/2.0/mlflow/experiments/list
          max-attempts: 240     # 240 * 5s = 20 min si besoin
          retry-delay: 5s
          follow-redirect: false
          retry-all: true       # réessaie aussi les erreurs transitoires (exit 52, etc.)

      # Entraîner et enregistrer une nouvelle version du modèle
      - name: Train & register model
        run: docker compose -f docker-compose.yml run --rm trainer

      # Démarrer/rafraîchir l'API de service
      - name: Up serve
        run: docker compose -f docker-compose.yml up -d serve

      # ✅ Attente robuste de l’API FastAPI
      - name: Wait for FastAPI
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://127.0.0.1:8000/health
          max-attempts: 120
          retry-delay: 3s
          follow-redirect: false
          retry-all: true

      - name: Show endpoints
        run: |
          echo "MLflow UI     : http://127.0.0.1:5000"
          echo "FastAPI (docs): http://127.0.0.1:8000/docs"






